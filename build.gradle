buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.4.2'
  }
}

def getPackageName = { "com.stanfy.enroscar.${it.name.replaceAll(/\W/, '').replaceAll(/enroscar/, '')}" }
def projectVersion = "0.9-SNAPSHOT"

def androidLibs = ['enroscar-sdk-dep', 'enroscar-ui']

def androidMavenDep = [
  group : 'com.google.android', name : 'android', version : '+'
]

def robolectricDep = [
  group: 'org.robolectric', name: 'robolectric', version: '+'
]

task wrapper(type: Wrapper) {
  gradleVersion = '1.6'
}

// ==================================== COMMON ====================================

def checkstyleDir = new File(rootDir, 'config/checkstyle')
def checkstyleConfig = new File(checkstyleDir, 'checkstyle.xml')

subprojects {

  apply plugin : 'checkstyle'
  apply plugin : 'maven'
  apply plugin : 'signing'

  version = projectVersion
  group = 'com.stanfy.enroscar'

  checkstyle {
    configFile = checkstyleConfig
    configProperties['basedir'] = project.projectDir
  }

  repositories {
    mavenCentral()
    // XXX this should have been added automatically by Android plugin
    maven {
      url "$System.env.ANDROID_HOME/extras/android/m2repository/"
    }
  }

  signing {
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        def repoUrl = projectVersion.concat("SNAPSHOT") ? "https://oss.sonatype.org/content/repositories/snapshots/"
        : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        repository(url: repoUrl) {
          authentication(userName: nexusUsername, password: nexusPassword)
        }

        pom.project {
          name 'Enroscar'
          description 'Android Library'
          url 'https://github.com/stanfy/enroscar'
          inceptionYear '2011'

          scm {
            url 'https://github.com/stanfy/enroscar'
            connection 'scm:git:git@github.com:stanfy/enroscar.git'
            developerConnection 'scm:git:git@github.com:stanfy/enroscar.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

        }
        pom.whenConfigured { pom ->
          pom.dependencies.removeAll { dep -> dep.groupId == 'com.google.android' }
        }

      }
    }
  }

}


// Java Projects

configure(subprojects.findAll() { !(it.name in androidLibs) }) {
  
  apply plugin : 'java'

  sourceCompatibility = 1.6

  dependencies {
    compile androidMavenDep
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.easytesting:fest-assert-core:2.0M10'
    testCompile robolectricDep
  }

  def testSelectionConfig = {
    ignoreFailures = true
    scanForTestClasses = false
    
    def selection = null
    try {
      selection = project.testSelection
    } catch (def e) {
      // ignore
    }
    if (!selection) {
      selection = "**/*Test.class"
    }
    
    include selection
    exclude "**/Abstract*.class"
  }
  
  test(testSelectionConfig)
  
  task debugTest(type : Test)
  debugTest.doFirst {
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
  }
  debugTest(testSelectionConfig)
  debugTest.dependsOn 'cleanTest'


  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
  }

  task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
  }

  task testsJar(type : Jar) {
    classifier = 'tests'
    from sourceSets.test.output
  }
  
  configurations {
    testArchives {
      extendsFrom testRuntime
    }
  }
  
  artifacts {
    testArchives testsJar

    archives jar
    archives sourcesJar
    archives javadocJar
  }

}

// Android Projects

configure(subprojects.findAll() { it.name in androidLibs }) {
  
  apply plugin : 'android-library'

  android {
    compileSdkVersion 17

    buildToolsVersion '17'

    defaultConfig {
      versionCode 9
      versionName projectVersion
      minSdkVersion 8
      targetSdkVersion 17
      packageName getPackageName(project)
    }
  }

  configurations {
    jarPackage { /* jar package for references from other Java projects */ }
    jvmTest.extendsFrom compile /* tests on JVM */
  }
  
  task classesJar(type : Copy, dependsOn : 'packageReleaseJar') {
    from 'build/bundles/release/classes.jar'
    into "build/libs"
    rename { "${project.name}-${project.version}.jar" }
  }
  
  sourceSets {
    jvmTest {
      compileClasspath += configurations.jvmTest
      runtimeClasspath += output + compileClasspath
    }
  }
  
  task testJvm(type: Test) {
    testClassesDir = project.sourceSets.jvmTest.output.classesDir
    classpath = project.sourceSets.jvmTest.runtimeClasspath
  }

  task sourcesJar(type: Jar) {
    from 'src/main/java'
    classifier = 'sources'
  }

  artifacts {
    // this artifact is referenced from other Java-based projects
    jarPackage(file("build/libs/${project.name}-${project.version}.jar")) {
      builtBy classesJar
    }

    // add sources to published artifacts
    archives sourcesJar
  }

  assemble.dependsOn classesJar
  check.dependsOn testJvm
  
  dependencies {
    jvmTest robolectricDep
    jvmTest androidMavenDep

    jvmTest group: 'junit', name: 'junit', version: '4.11'
    jvmTest 'org.easytesting:fest-assert-core:2.0M10'

    // use main sources
    // TODO can it be made with source sets?
    jvmTest files("$buildDir/classes/debug") {
      builtBy 'compileDebug'
    }
  }
  
}

